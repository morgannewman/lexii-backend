from server.config import Config
from flask import Flask, request, abort, jsonify
from peewee import *
from playhouse.flask_utils import FlaskDB


# Init app
app = Flask(__name__)
# Default to production environment for security
app.config.from_object(Config)
# Init db
db_wrapper = FlaskDB(app)
db = db_wrapper.database

from server.models import Users, Snippets


@app.before_request
def test_route():
    print("")


@app.before_request
def _protect_api_root_JWT_strategy():
    if request.path[1:4] == "api":
        # Extract auth header from request
        try:
            token = request.headers["Authorization"][7:]
        except Exception:
            err = jsonify({"message": "missing `Authorization` header in request"})
            err.status = "400"
            abort(err)
        # Decode token to user object
        try:
            user = Users.decode_auth_token(token)
        except Exception:
            err = jsonify({"message": "Invalid token"})
            err.status = "400"
            abort(err)
        # Append user object to request object
        request.user = user


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    if db.is_closed():
        db.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exp):
    if not db.is_closed():
        db.close()


import server.routes
